#!/usr/bin/env bash

# This is the system test suite for auth-service.
#
# How to run:
# In the parent directory:
# > make up
# Then run this script like this:
# > ./test dockertest

set -e

if [[ -n $DEBUG ]]; then
  set -x
  CURL="curl -v"
  SILENT=""
else
  CURL="curl --silent"
  SILENT="-o /dev/null"
fi


# You need to have jq in path

AUTHSERVICE_CONTAINER=auth-service_auth-service_1
DB_CONTAINER=auth-service_database_1
DB_HOST=database
DB_USER=postgres
DB_DATABASE=postgres
WEB_HOST=localhost:8000
EMAIL_HOST=localhost:8025
API=$WEB_HOST/api
EMAIL_API=$EMAIL_HOST/api/v1
USER=user1@example.com
PASSWORD=pwd123
USER2=user2@example.com
PASSWORD2=pwd1234
NAME="JohnDoe"
INSTANCE="de305d54-75b4-431b-adb2-eb6b9e546014"
INSTANCE2="$(uuidgen)"


NOTINSTANCE="deadbeef-75b4-431b-adb2-eb6b9e546014"

testing () {
    echo -e "\e[32m$1 \e[39m"
}


errmsg() {
    echo -e "\e[91mTest Failed: $*\e[39m"
}

fail () {
    errmsg "$@"
    exit 1
}

authservice () {
   docker exec $AUTHSERVICE_CONTAINER auth-service "$@"
}

db () {
    docker exec \
           -i $DB_CONTAINER psql \
           -h $DB_HOST \
           -U $DB_USER \
           $DB_DATABASE "$@"
}

run_db () {
    docker exec \
           -it $DB_CONTAINER psql \
           -h $DB_HOST \
           -U $DB_USER \
           $DB_DATABASE "$@"
}


docker_setup () {
    db &> /dev/null <<EOF
DROP SCHEMA public CASCADE;
DROP SCHEMA _meta CASCADE;
CREATE SCHEMA public
  AUTHORIZATION postgres;

GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO public;
COMMENT ON SCHEMA public
  IS 'standard public schema';
EOF
    authservice adduser "$USER" "$PASSWORD" "$NAME"
    authservice adduser "$USER2" "$PASSWORD2" "$NAME" "12345"

    authservice newinstance "instance1" "$INSTANCE"
    authservice newinstance "instance2" "$INSTANCE2"
    authservice addinstance "$USER" "$INSTANCE"
    authservice addrole "$USER" "testrole"
    authservice addrole "$USER" "user"
}

get_otp () {
OTP=$(db -qtA <<EOF
SELECT password FROM user_otp
  ORDER BY created DESC
  LIMIT 1
EOF
   )
}

start () {
    cabal run -- run
}


nginx_logs () {
    docker exec authservice_upstream_1 cat /tmp/nginx.log
}

enter_nginx() {
    docker exec -it authservice_upstream_1 /bin/bash
}


create_otp() {
    if [[ -z $1 ]]; then
      LOGIN_USER=$USER
    else
        LOGIN_USER=$1
    fi
    if [[ -z $2 ]]; then
      LOGIN_PASSWORD=$PASSWORD
    else
        LOGIN_PASSWORD=$2
    fi
    RES=$($CURL -H "Content-Type: application/json" \
                -d "{ \"user\": \"$LOGIN_USER\", \"password\": \"$LOGIN_PASSWORD\" }" \
                http://$API/login)
    [[ $RES == '{"error":"One time password required"}' ]] || fail "Could not create OTP: $RES"
}

login() {
    unset TOKEN
    if [[ -z $1 ]]; then
      LOGIN_USER=$USER
    else
        LOGIN_USER=$1
    fi
    if [[ -z $2 ]]; then
      LOGIN_PASSWORD=$PASSWORD
    else
        LOGIN_PASSWORD=$2
    fi
    if [[ -z $3 ]]; then
      LOGIN_STRING="{ \"user\": \"$LOGIN_USER\", \"password\": \"$LOGIN_PASSWORD\" }"
    else
        LOGIN_STRING="{ \"user\": \"$LOGIN_USER\", \"password\": \"$LOGIN_PASSWORD\", \"otp\":\"$3\" }"
    fi

    RES=$($CURL -H "Content-Type: application/json" \
                --fail \
                -d "$LOGIN_STRING" \
                http://$API/login)

    TOKEN=$(echo "$RES" | jq -r '.token')
    [[ -n "$TOKEN" ]]
}

http() {
    tmpfile=$(mktemp --tmpdir auth-service.tmp.XXXXX) || fail "Could not make temporary file"
    trap "rm -f $tmpfile" EXIT
    res=$($CURL -o "$tmpfile" -w "%{http_code}" "$@")
    if [[ "$res" -lt 200 || "$res" -gt 300 ]]; then
      echo "http error (response code $res)"
      echo "To reproduce : $CURL $*"
    else
        cat "$tmpfile"
    fi
}

call() {
    tmpfile=$(mktemp --tmpdir auth-service.tmp.XXXXX) || fail "Could not make temporary file"
    trap "rm -f $tmpfile" EXIT
    ENDPOINT=$1
    shift
    RES=$($CURL -XPOST \
                -o "$tmpfile" \
                -w "%{http_code}" \
                -H "X-Instance: $INSTANCE" \
                -H "X-Token: $TOKEN" \
                "$@" \
                "http://$API/$ENDPOINT"\
       )
    if [[ "$RES" -lt 200 || "$RES" -gt 300 ]]; then
      echo "$RES when calling POST http://$API/$ENDPOINT"
      cat "$tmpfile"
      echo "Command was: $CURL -XPOST -H \"X-Instance: $INSTANCE\" -H \"X-Token: $TOKEN\" \"$*\" \"http://$API/$ENDPOINT"\"
      fail "call threw error"
    fi
}

logout() {
    $CURL -H "X-Instance: $INSTANCE" \
          -H "X-Token: $TOKEN" \
          http://$API/logout
}

check_upstream() {
    RES=$($CURL -H "X-Instance: $INSTANCE" \
                -H "X-Token: $TOKEN" \
                http://$API/foo/index.html)
    [[ $RES == "foo!" ]]
}

email() {
    endpoint=$1
    shift
    $CURL "$@" "http://$EMAIL_API/$endpoint"
}

clearEmail() {
    email messages -XDELETE -o /dev/null
}


# Reads the latest email and tries to extract the token; stores it in $token
emailGetToken() {
    tmpfile=$(mktemp --tmpdir auth-service.tmp.XXXXX) || fail "Could not make temporary file"
    trap "rm -f $tmpfile" EXIT
    res=$($CURL --silent -w "%{http_code}" "http://$EMAIL_API/messages" -o "$tmpfile")
    if [[ $res -lt 200 || $res -gt 300 ]]; then
       fail "Failed with error code $res"
    fi
    # This is a bit hacky, we rely on the email to contain a link of the form
    # "?token=<token>" the "3D" is there fore MIME reasons

    token=$(< "$tmpfile" \
      jq -r '.[0] | .MIME.Parts | .[1] | .Body' \
              | perl -n -e '/\?token=3D([[:alnum:]]+)<\/a>/ && print $1')
    [[ -n "$token" ]] || fail "could not get token"

}

# run _local_ test
runtest() {
    RES="$(login)"
    echo $RES
    TOKEN=$(echo "$RES" | jq -r '.token.token')
    if [[ -z "$TOKEN" ]]; then
       echo "Could not login"
       exit 1
    fi
    RES=$($CURL "http://$HOST/check-token/$INSTANCE/$TOKEN")
    echo "$RES"
}

check_connection() {
    res=$(curl "$WEB_HOST" --silent -o /dev/null -w "%{http_code}")
    [[ $res = 200 ]]
}

function decode_b64 {
  read -r input
  _l=$((${#input} % 4))
  if [ $_l -eq 2 ]; then _s="$input"'=='
  elif [ $_l -eq 3 ]; then _s="$input"'='
  else _s="$input" ;
  fi
  echo "$_s" | tr '_-' '/+' | openssl enc -d -a -A
}

# Parse JWS (ignore signature and header)
parse_jws () {
  cut -d '.' -f 2 | decode_b64
}

docker_test() {

    if ! check_connection; then
      echo -n "Waiting for server to start"
      until check_connection; do
          sleep 1
          echo -n "."
      done
      echo
    fi

    docker_setup #  &> /dev/null
    testing "Trying log in"
    login || fail "could not log in"
    testing "Checking token"
    RES=$($CURL -o /dev/null \
                --write-out "%{http_code}"\
                -H "X-Token: $TOKEN" \
                http://$API/check-token)
    [[ $RES == "200" ]] || fail "Could not verify token got $RES"

    testing "Trying to reach upstream resource"
    RES=$($CURL -H "X-Instance: $INSTANCE" \
                -H "X-Token: $TOKEN" \
                http://$API/foo/index.html)
    [[ $RES == "foo!" ]] || fail "Could not retrieve foo.html, got $RES insted"

    testing "Trying to reach upstream resource without token"
    RES=$($CURL -o /dev/null \
                -w "%{http_code}" \
                -H "X-Instance: $INSTANCE" \
                http://$API/index.htm)
    [[ $RES == "403" ]] || fail "Did not get authorization denied, instead got $RES"

    testing "Trying to reach upstream resource with bogus token"
    RES=$($CURL -o /dev/null \
                -w "%{http_code}" \
                -H "X-Instance: $INSTANCE" \
                -H "X-Token: bogus$TOKEN" \
                http://$API/index.htm)
    [[ $RES == "403" ]] || fail "Did not get authorization denied, instead got $RES"

    testing "Trying / without a token"
    RES=$($CURL http://$WEB_HOST/ )
    [[ $RES == "Authenticate!" ]]  || fail "Did not get redirect , instead got $RES"

    testing "Trying /auth/index.html"
    RES=$($CURL http://$WEB_HOST/auth/index.html)
    [[ $RES == "Authenticate!" ]] || fail "Did not get auth.html, instead got $RES"

    testing "Trying /auth/index.html with token"
    RES=$($CURL -o /dev/null \
                -w "%{http_code}" \
                -H "X-Instance: $INSTANCE" \
                --cookie "token=$TOKEN" \
                http://$WEB_HOST/auth/index.html)
    [[ $RES == "303" ]] || fail "Did not get redirect, instead got $RES"

    testing "Trying to get user info"
    RES=$($CURL --cookie "token=$TOKEN" \
                http://$API/user-info)
    [[ $(echo "$RES" | jq -r '.email') == "user1@example.com" ]] || fail "Could not get user info"

    testing "Getting header info"
    RES=$($CURL -I \
                --cookie "token=$TOKEN" \
                -H "X-Instance: $INSTANCE" \
                http://$WEB_HOST/index.html
       )
    ETAG=$(echo "$RES" | tr -d '\r' | awk 'BEGIN {FS=": "}/^ETag/{print $2}')
    LASTMOD=$(echo "$RES" \
                   | tr -d '\r' \
                   | awk 'BEGIN {FS=": "}/^Last-Modified/{print $2}'
           )
    [[ -n $ETAG ]] || fail "No ETag received"
    [[ -n $LASTMOD ]] || fail "No Last-Modified received"

    testing "Trying If-Modified-Since"
    RES=$($CURL --cookie "token=$TOKEN" \
                -H "X-Instance: $INSTANCE" \
                -H "If-Modified-Since: $LASTMOD" \
                -o /dev/null \
                -w "%{http_code}" \
                http://$WEB_HOST/index.html
       )
    [[ $RES == "304" ]] || fail "If-Modified-Since did not result in 304, got $RES instead"

    testing "Trying If-None-Match"
    RES=$($CURL --cookie "token=$TOKEN" \
                -H "X-Instance: $INSTANCE" \
                -H "If-None-Match: $ETAG" \
                -o /dev/null \
                -w "%{http_code}" \
                http://$WEB_HOST/index.html
       )
    [[ $RES == "304" ]] || fail "If-None-Match did not result in 304, got $RES instead"

    testing "Trying If-None-Match with non-matching ETag"
    RES=$($CURL --cookie "token=$TOKEN" \
                -H "X-Instance: $INSTANCE" \
                -H "If-None-Match: \"bogus\"" \
                -o /dev/null \
                -w "%{http_code}" \
                http://$WEB_HOST/index.html
       )
    [[ $RES == "200" ]] || fail "If-None-Match did not result in 304, got $RES instead"

    testing "Trying If-Modified-Since + If-None-Match"
    RES=$($CURL -H "X-Instance: $INSTANCE" \
                --cookie "token=$TOKEN" \
                -H "If-Modified-Since: $LASTMOD" \
                -H "If-None-Match: $ETAG" \
                -o /dev/null \
                -w "%{http_code}" \
                http://$WEB_HOST/index.html
       )
    [[ $RES == "304" ]] || fail "If-Modified-Since + If-None-Match did not result in 304, got $RES instead"

    testing "Trying If-Modified-Since + If-None-Match without token"
    RES=$($CURL -I "X-Instance: $INSTANCE" \
                http://$WEB_HOST/index.html)

    ETAG=$(echo "$RES" | tr -d '\r' | awk 'BEGIN {FS=": "}/^ETag/{print $2}')
    LASTMOD=$(echo "$RES" \
                   | tr -d '\r' \
                   | awk 'BEGIN {FS=": "}/^Last-Modified/{print $2}'
           )
    [[ -n $ETAG ]] || fail "No ETag received: \n$RES"
    [[ -n $LASTMOD ]] || fail "No Last-Modified received: \n$RES"
    RES=$($CURL -H "X-Instance: $INSTANCE" \
                -H "If-Modified-Since: $LASTMOD" \
                -H "If-None-Match: $ETAG" \
                -o /dev/null \
                -w "%{http_code}" \
                http://$WEB_HOST/index.html
       )
    [[ $RES == "304" ]] || fail "If-Modified-Since + If-None-Match did not result in 304, got $RES instead"

    testing "Trying index.html without instance"
    RES=$($CURL --cookie "token=$TOKEN" \
                -o /dev/null \
                -w "%{http_code}" \
                http://$WEB_HOST/index.html
       )
    [[ $RES == "200" ]] || fail "Could not get index.html without instance"

    testing "Trying index.html with wrong instance"
    RES=$($CURL -H "X-Instance: $NOTINSTANCE" \
                --cookie "token=$TOKEN" \
                -o /dev/null \
                -w "%{http_code}" \
                http://$API/index.html
       )
    [[ $RES == "403" ]] || fail "Did not get 403, got $RES instead"

    testing "Trying / without token (should fail)"
    RES=$($CURL http://$WEB_HOST/ )
    [[ $RES == "Authenticate!" ]] || fail "Did not receive Authenticate!, got $RES instead"

    testing "Trying /index.html without token (should fail)"
    RES=$($CURL http://$WEB_HOST/index.html )
    [[ $RES == "Authenticate!" ]] || fail "Did not receive Authenticate!, got $RES instead"

    testing "Trying /foo.html without token"
    RES=$($CURL http://$WEB_HOST/foo.html )
    [[ $RES == "foo!" ]] || fail "Did not receive foo!, got $RES instead"

    testing "Testing otp"
    create_otp $USER2 $PASSWORD2
    get_otp
    [[ -n $OTP ]] || fail "Could not get OTP"
    OTP=$(echo $OTP | tr '[:upper:]' '[:lower:]')
    login $USER2 $PASSWORD2 $OTP || fail "could not log in"

    testing "Trying to login without otp"
    create_otp $USER2 $PASSWORD2
    login $USER2 $PASSWORD2 && fail "Login did not require OTP"

    testing "Trying to double-use OTP"
    create_otp $USER2 $PASSWORD2
    get_otp
    [[ -n $OTP ]] || fail "Could not get OTP"
    OTP=$(echo $OTP | tr '[:upper:]' '[:lower:]')
    login $USER2 $PASSWORD2 $OTP || fail "could not log in"
    logout
    login $USER2 $PASSWORD2 $OTP && fail "Double-used OTP"

    testing "Testing logout"
    logout
    RES=$($CURL -H "X-Instance: $INSTANCE" \
                -H "X-Token: $TOKEN" \
                -o /dev/null \
                -w "%{http_code}" \
                http://$API/foo/index.html)
    [[ $RES == "403" ]] || fail "Accessing resource after logout didn't lead to 403, returned $RES instead"

    testing "Testing disable-sessions"
    login || fail "could not log in"
    OLDTOKEN=$TOKEN
    login || fail "could not log in"
    check_upstream || fail "Could not reach upstream"
    call "disable-sessions"
    check_upstream || fail "Disable-sessions disabled current session"
    TOKEN=$OLDTOKEN
    check_upstream && fail "Sessions where not disabled"

    testing "Testing password change"
    docker_setup &> /dev/null
    login || fail "could not log in"
    call "change-password" \
         -H "Content-Type: application/json" \
         -d "{\"oldPassword\":\"$PASSWORD\",\"newPassword\":\"$PASSWORD2\"}"
    logout
    login $USER $PASSWORD2 || fail "Could not login with new password"
    login && fail "could still log on with old credentials"

    testing "Password reset email"
    clearEmail
    docker_setup &> /dev/null
    call "request-password-reset" \
         -H "Content-Type: application/json" \
         -d "{\"email\": \"$USER\"}"
    emailGetToken
    call "reset-password" -H "Content-Type: application/json" \
         -d "{\"token\":\"$token\", \"newPassword\":\"newpwd\"}"
    login "$USER" "newpwd" || fail "Could not login"
    # Check that we can't login with the old credentials
    login && fail "password wasn't changed"

    testing "Password reset info"
    call "request-password-reset" \
         -H "Content-Type: application/json" \
         -d "{\"email\": \"$USER\"}"
    emailGetToken
    $CURL "http://$API/reset-password-info/$token"

    testing "Password reset with unknown email"
    call "request-password-reset" \
         -H "Content-Type: application/json" \
         -d "{\"email\": \"unknown_user@no-address.abc\"}"
    call "request-password-reset" \
         -H "Content-Type: application/json" \
         -d "{\"email\": \"$USER\"}"
    emailGetToken
    http "http://$API/reset-password-info?token=$token"

    testing "Checking Roles"
    docker_setup &> /dev/null
    login
    RES=$($CURL -H "X-Instance: $INSTANCE" \
                -H "X-Token: $TOKEN" \
                http://$API/auth-header \
            | parse_jws \
            | jq -r '.roles | sort | join(",")'
       )
    [[ "$RES"  == "testrole,user" ]] || fail "Roles were not set: $RES"

    testing "Account Creation"
    http "http://$API/create-account" \
         -H "Content-type: application/json" \
         -H "X-Instance: $INSTANCE2" \
         -d '{"email": "user3@example.com", "password": "abcfoo", "name": "3"}'
    login "user3@example.com" "abcfoo" || fail "Could not login new user"
    [[ $(echo "$RES" | jq -r '.instances | .[0] .name') == "instance1"
       && $(echo "$RES" | jq -r '.instances | .[1] .name') == "instance2"
     ]] \
      || fail "Newly created user is missing instance"

}


docker_rebuild() {
    set -e
    cd ..
    make down
    make run
}

case $1 in
    dockertest)
        docker_test
        ;;
    docker)
        docker_rebuild
        ;;
    setup)
        docker_setup
        ;;
    login)
        shift
        login "$@"
        echo "export TOKEN=$TOKEN"
        ;;
    nginx_rebuild_conf)
        nginx_build_conf
        ;;
    nginx_logs)
        nginx_logs
        ;;
    nginx_enter)
        enter_nginx
        ;;
    foo)
        footest
        ;;
    db)
        run_db "$@"
        ;;
    call)
        # for debugging
        shift
        "$@"
        ;;
    *)
        echo "usage: test.sh dockertest|docker|login|nginx_rebuild_conf|nginx_logs|nginx_enter"
        exit 1
        ;;
esac
