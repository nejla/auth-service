# use mustache to configure
#
# As part of the auth-service-proxy container, parameters are set in the run.sh
# script. Interpolations like \{\{#ratelimit\}\} are explicitly set in run.sh.
# See run.sh for more details.

worker_processes 1;
{{#error_log}}
error_log {{.}} warn;
{{/error_log}}

{{#debug}}
error_log /dev/stderr debug;
{{/debug}}

events {
    worker_connections 1024;
}


http {
    {{#ratelimit}}
    # Rate limitting
    limit_req_zone $binary_remote_addr zone=login:10m rate=2r/m;
    limit_req_zone $binary_remote_addr zone=sso:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=service:10m rate=5r/s;
    limit_req zone=service burst=10;
    limit_req_status 429; # Too Many Requests
    {{/ratelimit}}
    {{^ratelimit}}
    # Rate limiting disabled
    {{/ratelimit}}

    # Make sure we see the real address so we can rate limit according to it
    set_real_ip_from 0.0.0.0/0;
    real_ip_header  X-Forwarded-For;

    # [1] (See [1] later)
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    map $http_x_instance $instance_port {
        default "80";
        {{#instance_ports}}
        "{{instance}}" "{{port}}";
        {{/instance_ports}}
    }

    client_max_body_size 0;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    {{#access_log}}
    access_log {{.}};
    {{/access_log}}

    server {
        listen 80;
        server_name auth-service;
        rewrite_log on;
        resolver 127.0.0.11;
        location / {
            auth_request /auth;
            auth_request_set $auth $upstream_http_x_auth;
            # The variable $auth now contains the the signed authentication info
            proxy_set_header X-AUTH $auth;
            proxy_set_header X-Original-URI $request_uri;

            proxy_pass http://$http_x_instance:$instance_port;

            # [1] Set the "Upgrade" and "Connection" headers when we receive
            # them We have to manually pass them through because those headers
            # are "per-hop".
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Increase timeouts to 5 minutes.
            proxy_send_timeout 300;
            proxy_read_timeout 300;
            send_timeout 300;

        }

        location = /auth {
                set $token $cookie_token;
                if ($token = '') {
                  set $token $http_x_token;
                }
                if ($token = '') {
                  return 403;
                }

                set $instance $http_x_instance;
                if ($instance = '') {
                  return 403;
                }
                proxy_pass http://{{auth_service_host}}/check-token;
                proxy_set_header X-Token $token;
                proxy_set_header X-Instance $instance;
                proxy_set_header X-Original-URI $request_uri;
                proxy_set_header Accept application/json;
        }

        location = /login {
                {{#ratelimit}}
                limit_req zone=login burst=10 nodelay;
                {{/ratelimit}}
                proxy_pass http://{{auth_service_host}}/login/;
                proxy_set_header X-Original-URI $request_uri;
                add_header Set-Cookie "token=$upstream_http_x_token; SameSite=Lax; Secure; Path=/;{{expire}}";
        }

        location /sso/assert {
                set $instance $http_x_instance;
                if ($instance = '') {
                  return 403;
                }

                {{#ratelimit}}
                limit_req zone=login burst=10 nodelay;
                {{/ratelimit}}
                proxy_pass http://{{auth_service_host}}/sso/assert;
                proxy_set_header X-Original-URI $request_uri;
                proxy_set_header X-Instance $instance;
                add_header Set-Cookie "token=$upstream_http_x_token; SameSite=Lax; Secure; Path=/;{{expire}}";
        }

        location /sso/ {
                set $instance $http_x_instance;
                if ($instance = '') {
                  return 403;
                }

                {{#ratelimit}}
                limit_req zone=sso burst=10 nodelay;
                {{/ratelimit}}
                proxy_pass http://{{auth_service_host}}/sso/;
                proxy_set_header X-Original-URI $request_uri;
                proxy_set_header X-Instance $instance;
        }

        location = /logout {
                set $token $cookie_token;
                if ($token = '') {
                  set $token $http_x_token;
                }
                if ($token = '') {
                  return 403;
                }

                proxy_pass http://{{auth_service_host}}/logout/$token;
                proxy_set_header X-Original-URI $request_uri;
                add_header Set-Cookie "token=deleted; Path=/; Expires=Thu, 01-Jan-1970 00:00:01 GMT";

        }
        location = /disable-sessions {
                set $token $cookie_token;
                if ($token = '') {
                  set $token $http_x_token;
                }
                if ($token = '') {
                  return 403;
                }
                proxy_pass http://{{auth_service_host}}/disable-sessions/$token/;
                proxy_set_header X-Original-URI $request_uri;

        }
        location = /change-password {
                {{#ratelimit}}
                limit_req zone=login burst=10 nodelay;
                {{/ratelimit}}
                set $token $cookie_token;
                if ($token = '') {
                  set $token $http_x_token;
                }
                if ($token = '') {
                  return 403;
                }
                proxy_pass http://{{auth_service_host}}/change-password/$token/;
                proxy_set_header X-Original-URI $request_uri;

        }
        location = /check-token {
                set $token $cookie_token;
                if ($token = '') {
                  set $token $http_x_token;
                }
                if ($token = '') {
                  return 403;
                }
                proxy_pass http://{{auth_service_host}}/check-token/$token/;
                proxy_pass_request_body off;
                proxy_set_header Content-Length "";
                proxy_set_header X-Original-URI $request_uri;
        }


        location = /auth-service.js {
            alias /www/auth-service.js;
        }

        location = /user-info {
                set $token $cookie_token;
                if ($token = '') {
                  set $token $http_x_token;
                }
                if ($token = '') {
                  return 403;
                }
                proxy_pass http://{{auth_service_host}}/user-info-by-token/$token/;
                proxy_pass_request_body off;
                proxy_set_header Content-Length "";
                proxy_set_header X-Original-URI $request_uri;
        }

        location = /request-password-reset {
                proxy_pass http://{{auth_service_host}}/request-password-reset/;
                proxy_set_header X-Original-URI $request_uri;
        }

        location = /reset-password {
                {{#ratelimit}}
                limit_req zone=login burst=3 nodelay;
                {{/ratelimit}}
                proxy_pass http://{{auth_service_host}}/reset-password/;
                proxy_set_header X-Original-URI $request_uri;
        }

        location = /reset-password-info {
                {{#ratelimit}}
                limit_req zone=login burst=3 nodelay;
                {{/ratelimit}}
                proxy_pass http://{{auth_service_host}}/reset-password-info/;
                proxy_pass_request_body off;
                proxy_set_header Content-Length "";
                proxy_set_header X-Original-URI $request_uri;
        }

        location = /create-account {
                {{#ratelimit}}
                limit_req zone=login burst=3 nodelay;
                {{/ratelimit}}
                proxy_pass http://{{auth_service_host}}/create-account/;
                proxy_set_header X-Original-URI $request_uri;
        }

        location = /auth-service-status {
                {{#ratelimit}}
                limit_req zone=service burst=1 nodelay;
                {{/ratelimit}}
                proxy_pass http://{{auth_service_host}}/status/;
                proxy_set_header X-Original-URI $request_uri;
        }

        location /admin/ {
              set $token $cookie_token;
              if ($token = '') {
                set $token $http_x_token;
              }
              if ($token = '') {
                return 403;
              }

              proxy_set_header X-Original-URI $request_uri;
              proxy_set_header X-Token $token;

              proxy_pass http://{{auth_service_host}}/admin/;

        }

        # Locations to redirect /auth.html
        location = /authentication/index.html {
            # Serve auth.html instead of a 403 page when auth fails
            error_page 403 =200 /authenticatehtml;
            auth_request /auth;
            # `try_files' only fires after authentication and allows us to use
            # another location if none are found. You can replace @toroot with
            # /, but then it will serve the data from there rather than
            # redirecting
            # We have to do this because both `rewrite' and `return' will
            # short-circuit the authentication request
            try_files nonexistent @toroot;
            # Can use alias to serve a static file instead (will work correctly)
            # alias /www/skip.html;
        }

        location /authentication/ {
            root /www/ ;
            index index.html;
        }

        # Auxiliary location to redirect to / in case of success
        location @toroot {
            return 303 /;
        }
        # Auciliary location to serve the auth.html file
        location = /authenticatehtml {
            internal;
            default_type "text/html; charset=utf-8";
            expires -1;
            alias /www/authentication/index.html;
        }

    }
}
